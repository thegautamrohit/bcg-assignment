import { getRandomConsumptionValue } from "./Utils/generateData";
import { uuid } from "uuidv4";

export const CityStackData = [
  {
    stackId: uuid(),
    stackType: "backlog",
    displayName: "General Stack 1",
    percent: {
      val1: 84,
      val2: 87,
    },
    quaterWiseData: {
      // will have quaters number as indexed
      2022: [
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
      ],
      2023: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
      ],
      2024: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
      2025: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
      2026: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
    },
  },
  {
    stackId: uuid(),
    stackType: "backlog",
    displayName: "General Stack 2",
    percent: {
      val1: 72,
      val2: 65,
    },
    quaterWiseData: {
      // will have quaters number as indexed
      2022: [
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
      ],
      2023: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
      ],
      2024: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
      2025: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
      2026: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
    },
  },
  {
    stackId: uuid(),
    stackType: "backlog",
    displayName: "General Stack 3",
    percent: {
      val1: 92,
      val2: 78,
    },
    quaterWiseData: {
      // will have quaters number as indexed
      2022: [
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
      ],
      2023: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
      ],
      2024: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
      2025: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
      2026: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
    },
  },
  {
    stackId: uuid(),
    stackType: "backlog",
    displayName: "General Stack 4",
    percent: {
      val1: 83,
      val2: 89,
    },
    quaterWiseData: {
      // will have quaters number as indexed
      2022: [
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
      ],
      2023: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
      ],
      2024: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
      2025: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
      2026: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
    },
  },
  {
    stackId: uuid(),
    stackType: "backlog",
    displayName: "General Stack 5",
    percent: {
      val1: 73,
      val2: 54,
    },
    quaterWiseData: {
      // will have quaters number as indexed
      2022: [
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
      ],
      2023: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
      ],
      2024: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
      2025: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
      2026: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
    },
  },
  {
    stackId: uuid(),
    stackType: "backlog",
    displayName: "General Stack 6",
    percent: {
      val1: 65,
      val2: 87,
    },
    quaterWiseData: {
      // will have quaters number as indexed
      2022: [
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
      ],
      2023: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
      ],
      2024: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalForecast_historic: getRandomConsumptionValue(300000, 900000),
          finalConsumption: getRandomConsumptionValue(300000, 900000),
          aiForecast: getRandomConsumptionValue(null, null),
          finalForecast: getRandomConsumptionValue(null, null),
          finalConsumption_previous: getRandomConsumptionValue(null, null),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
      2025: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
      2026: [
        // will have quaters number as indexed
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
        {
          aiForecast_historic: getRandomConsumptionValue(null, null),
          finalForecast_historic: getRandomConsumptionValue(null, null),
          finalConsumption: getRandomConsumptionValue(null, null),
          aiForecast: getRandomConsumptionValue(300000, 900000),
          finalForecast: getRandomConsumptionValue(300000, 900000),
          finalConsumption_previous: getRandomConsumptionValue(300000, 900000),
        },
      ],
    },
  },
];
